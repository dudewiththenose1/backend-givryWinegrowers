
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Equipe
 * 
 */
export type Equipe = $Result.DefaultSelection<Prisma.$EquipePayload>
/**
 * Model Joueur
 * 
 */
export type Joueur = $Result.DefaultSelection<Prisma.$JoueurPayload>
/**
 * Model ImageJoueur
 * 
 */
export type ImageJoueur = $Result.DefaultSelection<Prisma.$ImageJoueurPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.equipe`: Exposes CRUD operations for the **Equipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipes
    * const equipes = await prisma.equipe.findMany()
    * ```
    */
  get equipe(): Prisma.EquipeDelegate<ExtArgs>;

  /**
   * `prisma.joueur`: Exposes CRUD operations for the **Joueur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Joueurs
    * const joueurs = await prisma.joueur.findMany()
    * ```
    */
  get joueur(): Prisma.JoueurDelegate<ExtArgs>;

  /**
   * `prisma.imageJoueur`: Exposes CRUD operations for the **ImageJoueur** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageJoueurs
    * const imageJoueurs = await prisma.imageJoueur.findMany()
    * ```
    */
  get imageJoueur(): Prisma.ImageJoueurDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Equipe: 'Equipe',
    Joueur: 'Joueur',
    ImageJoueur: 'ImageJoueur'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'equipe' | 'joueur' | 'imageJoueur'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Equipe: {
        payload: Prisma.$EquipePayload<ExtArgs>
        fields: Prisma.EquipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EquipeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EquipeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          findFirst: {
            args: Prisma.EquipeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EquipeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          findMany: {
            args: Prisma.EquipeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>[]
          }
          create: {
            args: Prisma.EquipeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          createMany: {
            args: Prisma.EquipeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EquipeCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>[]
          }
          delete: {
            args: Prisma.EquipeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          update: {
            args: Prisma.EquipeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          deleteMany: {
            args: Prisma.EquipeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EquipeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EquipeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EquipePayload>
          }
          aggregate: {
            args: Prisma.EquipeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEquipe>
          }
          groupBy: {
            args: Prisma.EquipeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EquipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EquipeCountArgs<ExtArgs>,
            result: $Utils.Optional<EquipeCountAggregateOutputType> | number
          }
        }
      }
      Joueur: {
        payload: Prisma.$JoueurPayload<ExtArgs>
        fields: Prisma.JoueurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JoueurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JoueurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          findFirst: {
            args: Prisma.JoueurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JoueurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          findMany: {
            args: Prisma.JoueurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>[]
          }
          create: {
            args: Prisma.JoueurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          createMany: {
            args: Prisma.JoueurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JoueurCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>[]
          }
          delete: {
            args: Prisma.JoueurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          update: {
            args: Prisma.JoueurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          deleteMany: {
            args: Prisma.JoueurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JoueurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JoueurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JoueurPayload>
          }
          aggregate: {
            args: Prisma.JoueurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJoueur>
          }
          groupBy: {
            args: Prisma.JoueurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JoueurGroupByOutputType>[]
          }
          count: {
            args: Prisma.JoueurCountArgs<ExtArgs>,
            result: $Utils.Optional<JoueurCountAggregateOutputType> | number
          }
        }
      }
      ImageJoueur: {
        payload: Prisma.$ImageJoueurPayload<ExtArgs>
        fields: Prisma.ImageJoueurFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageJoueurFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageJoueurFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>
          }
          findFirst: {
            args: Prisma.ImageJoueurFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageJoueurFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>
          }
          findMany: {
            args: Prisma.ImageJoueurFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>[]
          }
          create: {
            args: Prisma.ImageJoueurCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>
          }
          createMany: {
            args: Prisma.ImageJoueurCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageJoueurCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>[]
          }
          delete: {
            args: Prisma.ImageJoueurDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>
          }
          update: {
            args: Prisma.ImageJoueurUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>
          }
          deleteMany: {
            args: Prisma.ImageJoueurDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ImageJoueurUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ImageJoueurUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImageJoueurPayload>
          }
          aggregate: {
            args: Prisma.ImageJoueurAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImageJoueur>
          }
          groupBy: {
            args: Prisma.ImageJoueurGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImageJoueurGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageJoueurCountArgs<ExtArgs>,
            result: $Utils.Optional<ImageJoueurCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EquipeCountOutputType
   */

  export type EquipeCountOutputType = {
    joueur: number
  }

  export type EquipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | EquipeCountOutputTypeCountJoueurArgs
  }

  // Custom InputTypes
  /**
   * EquipeCountOutputType without action
   */
  export type EquipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipeCountOutputType
     */
    select?: EquipeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipeCountOutputType without action
   */
  export type EquipeCountOutputTypeCountJoueurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurWhereInput
  }


  /**
   * Count Type JoueurCountOutputType
   */

  export type JoueurCountOutputType = {
    imagejoueur: number
  }

  export type JoueurCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    imagejoueur?: boolean | JoueurCountOutputTypeCountImagejoueurArgs
  }

  // Custom InputTypes
  /**
   * JoueurCountOutputType without action
   */
  export type JoueurCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JoueurCountOutputType
     */
    select?: JoueurCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JoueurCountOutputType without action
   */
  export type JoueurCountOutputTypeCountImagejoueurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageJoueurWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id_user: string | null
    pseudo: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id_user: string | null
    pseudo: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id_user: number
    pseudo: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id_user?: true
    pseudo?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id_user?: true
    pseudo?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id_user?: true
    pseudo?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id_user: string
    pseudo: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_user?: boolean
    pseudo?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id_user?: boolean
    pseudo?: boolean
    password?: boolean
  }



  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id_user: string
      pseudo: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const userWithId_userOnly = await prisma.user.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id_user`
     * const userWithId_userOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id_user: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id_user: FieldRef<"User", 'String'>
    readonly pseudo: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Equipe
   */

  export type AggregateEquipe = {
    _count: EquipeCountAggregateOutputType | null
    _avg: EquipeAvgAggregateOutputType | null
    _sum: EquipeSumAggregateOutputType | null
    _min: EquipeMinAggregateOutputType | null
    _max: EquipeMaxAggregateOutputType | null
  }

  export type EquipeAvgAggregateOutputType = {
    id_equipe: number | null
  }

  export type EquipeSumAggregateOutputType = {
    id_equipe: number | null
  }

  export type EquipeMinAggregateOutputType = {
    id_equipe: number | null
    nom: string | null
  }

  export type EquipeMaxAggregateOutputType = {
    id_equipe: number | null
    nom: string | null
  }

  export type EquipeCountAggregateOutputType = {
    id_equipe: number
    nom: number
    _all: number
  }


  export type EquipeAvgAggregateInputType = {
    id_equipe?: true
  }

  export type EquipeSumAggregateInputType = {
    id_equipe?: true
  }

  export type EquipeMinAggregateInputType = {
    id_equipe?: true
    nom?: true
  }

  export type EquipeMaxAggregateInputType = {
    id_equipe?: true
    nom?: true
  }

  export type EquipeCountAggregateInputType = {
    id_equipe?: true
    nom?: true
    _all?: true
  }

  export type EquipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipe to aggregate.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipes
    **/
    _count?: true | EquipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EquipeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EquipeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipeMaxAggregateInputType
  }

  export type GetEquipeAggregateType<T extends EquipeAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipe[P]>
      : GetScalarType<T[P], AggregateEquipe[P]>
  }




  export type EquipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EquipeWhereInput
    orderBy?: EquipeOrderByWithAggregationInput | EquipeOrderByWithAggregationInput[]
    by: EquipeScalarFieldEnum[] | EquipeScalarFieldEnum
    having?: EquipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipeCountAggregateInputType | true
    _avg?: EquipeAvgAggregateInputType
    _sum?: EquipeSumAggregateInputType
    _min?: EquipeMinAggregateInputType
    _max?: EquipeMaxAggregateInputType
  }

  export type EquipeGroupByOutputType = {
    id_equipe: number
    nom: string
    _count: EquipeCountAggregateOutputType | null
    _avg: EquipeAvgAggregateOutputType | null
    _sum: EquipeSumAggregateOutputType | null
    _min: EquipeMinAggregateOutputType | null
    _max: EquipeMaxAggregateOutputType | null
  }

  type GetEquipeGroupByPayload<T extends EquipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipeGroupByOutputType[P]>
            : GetScalarType<T[P], EquipeGroupByOutputType[P]>
        }
      >
    >


  export type EquipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_equipe?: boolean
    nom?: boolean
    joueur?: boolean | Equipe$joueurArgs<ExtArgs>
    _count?: boolean | EquipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipe"]>

  export type EquipeSelectScalar = {
    id_equipe?: boolean
    nom?: boolean
  }


  export type EquipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | Equipe$joueurArgs<ExtArgs>
    _count?: boolean | EquipeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EquipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Equipe"
    objects: {
      joueur: Prisma.$JoueurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_equipe: number
      nom: string
    }, ExtArgs["result"]["equipe"]>
    composites: {}
  }


  type EquipeGetPayload<S extends boolean | null | undefined | EquipeDefaultArgs> = $Result.GetResult<Prisma.$EquipePayload, S>

  type EquipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EquipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EquipeCountAggregateInputType | true
    }

  export interface EquipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Equipe'], meta: { name: 'Equipe' } }
    /**
     * Find zero or one Equipe that matches the filter.
     * @param {EquipeFindUniqueArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EquipeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EquipeFindUniqueArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Equipe that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EquipeFindUniqueOrThrowArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EquipeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Equipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeFindFirstArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EquipeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipeFindFirstArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Equipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeFindFirstOrThrowArgs} args - Arguments to find a Equipe
     * @example
     * // Get one Equipe
     * const equipe = await prisma.equipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EquipeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Equipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipes
     * const equipes = await prisma.equipe.findMany()
     * 
     * // Get first 10 Equipes
     * const equipes = await prisma.equipe.findMany({ take: 10 })
     * 
     * // Only select the `id_equipe`
     * const equipeWithId_equipeOnly = await prisma.equipe.findMany({ select: { id_equipe: true } })
     * 
    **/
    findMany<T extends EquipeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Equipe.
     * @param {EquipeCreateArgs} args - Arguments to create a Equipe.
     * @example
     * // Create one Equipe
     * const Equipe = await prisma.equipe.create({
     *   data: {
     *     // ... data to create a Equipe
     *   }
     * })
     * 
    **/
    create<T extends EquipeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EquipeCreateArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Equipes.
     * @param {EquipeCreateManyArgs} args - Arguments to create many Equipes.
     * @example
     * // Create many Equipes
     * const equipe = await prisma.equipe.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EquipeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipes and returns the data saved in the database.
     * @param {EquipeCreateManyAndReturnArgs} args - Arguments to create many Equipes.
     * @example
     * // Create many Equipes
     * const equipe = await prisma.equipe.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipes and only return the `id_equipe`
     * const equipeWithId_equipeOnly = await prisma.equipe.createManyAndReturn({ 
     *   select: { id_equipe: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends EquipeCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipeCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Equipe.
     * @param {EquipeDeleteArgs} args - Arguments to delete one Equipe.
     * @example
     * // Delete one Equipe
     * const Equipe = await prisma.equipe.delete({
     *   where: {
     *     // ... filter to delete one Equipe
     *   }
     * })
     * 
    **/
    delete<T extends EquipeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EquipeDeleteArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Equipe.
     * @param {EquipeUpdateArgs} args - Arguments to update one Equipe.
     * @example
     * // Update one Equipe
     * const equipe = await prisma.equipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EquipeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EquipeUpdateArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Equipes.
     * @param {EquipeDeleteManyArgs} args - Arguments to filter Equipes to delete.
     * @example
     * // Delete a few Equipes
     * const { count } = await prisma.equipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EquipeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EquipeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipes
     * const equipe = await prisma.equipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EquipeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EquipeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Equipe.
     * @param {EquipeUpsertArgs} args - Arguments to update or create a Equipe.
     * @example
     * // Update or create a Equipe
     * const equipe = await prisma.equipe.upsert({
     *   create: {
     *     // ... data to create a Equipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipe we want to update
     *   }
     * })
    **/
    upsert<T extends EquipeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EquipeUpsertArgs<ExtArgs>>
    ): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Equipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeCountArgs} args - Arguments to filter Equipes to count.
     * @example
     * // Count the number of Equipes
     * const count = await prisma.equipe.count({
     *   where: {
     *     // ... the filter for the Equipes we want to count
     *   }
     * })
    **/
    count<T extends EquipeCountArgs>(
      args?: Subset<T, EquipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipeAggregateArgs>(args: Subset<T, EquipeAggregateArgs>): Prisma.PrismaPromise<GetEquipeAggregateType<T>>

    /**
     * Group by Equipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipeGroupByArgs['orderBy'] }
        : { orderBy?: EquipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Equipe model
   */
  readonly fields: EquipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EquipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    joueur<T extends Equipe$joueurArgs<ExtArgs> = {}>(args?: Subset<T, Equipe$joueurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Equipe model
   */ 
  interface EquipeFieldRefs {
    readonly id_equipe: FieldRef<"Equipe", 'Int'>
    readonly nom: FieldRef<"Equipe", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Equipe findUnique
   */
  export type EquipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe findUniqueOrThrow
   */
  export type EquipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe findFirst
   */
  export type EquipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipes.
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipes.
     */
    distinct?: EquipeScalarFieldEnum | EquipeScalarFieldEnum[]
  }

  /**
   * Equipe findFirstOrThrow
   */
  export type EquipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipe to fetch.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipes.
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipes.
     */
    distinct?: EquipeScalarFieldEnum | EquipeScalarFieldEnum[]
  }

  /**
   * Equipe findMany
   */
  export type EquipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter, which Equipes to fetch.
     */
    where?: EquipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipes to fetch.
     */
    orderBy?: EquipeOrderByWithRelationInput | EquipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipes.
     */
    cursor?: EquipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipes.
     */
    skip?: number
    distinct?: EquipeScalarFieldEnum | EquipeScalarFieldEnum[]
  }

  /**
   * Equipe create
   */
  export type EquipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Equipe.
     */
    data: XOR<EquipeCreateInput, EquipeUncheckedCreateInput>
  }

  /**
   * Equipe createMany
   */
  export type EquipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Equipes.
     */
    data: EquipeCreateManyInput | EquipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipe createManyAndReturn
   */
  export type EquipeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * The data used to create many Equipes.
     */
    data: EquipeCreateManyInput | EquipeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Equipe update
   */
  export type EquipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Equipe.
     */
    data: XOR<EquipeUpdateInput, EquipeUncheckedUpdateInput>
    /**
     * Choose, which Equipe to update.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe updateMany
   */
  export type EquipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Equipes.
     */
    data: XOR<EquipeUpdateManyMutationInput, EquipeUncheckedUpdateManyInput>
    /**
     * Filter which Equipes to update
     */
    where?: EquipeWhereInput
  }

  /**
   * Equipe upsert
   */
  export type EquipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Equipe to update in case it exists.
     */
    where: EquipeWhereUniqueInput
    /**
     * In case the Equipe found by the `where` argument doesn't exist, create a new Equipe with this data.
     */
    create: XOR<EquipeCreateInput, EquipeUncheckedCreateInput>
    /**
     * In case the Equipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EquipeUpdateInput, EquipeUncheckedUpdateInput>
  }

  /**
   * Equipe delete
   */
  export type EquipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
    /**
     * Filter which Equipe to delete.
     */
    where: EquipeWhereUniqueInput
  }

  /**
   * Equipe deleteMany
   */
  export type EquipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Equipes to delete
     */
    where?: EquipeWhereInput
  }

  /**
   * Equipe.joueur
   */
  export type Equipe$joueurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    where?: JoueurWhereInput
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    cursor?: JoueurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Equipe without action
   */
  export type EquipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Equipe
     */
    select?: EquipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EquipeInclude<ExtArgs> | null
  }


  /**
   * Model Joueur
   */

  export type AggregateJoueur = {
    _count: JoueurCountAggregateOutputType | null
    _avg: JoueurAvgAggregateOutputType | null
    _sum: JoueurSumAggregateOutputType | null
    _min: JoueurMinAggregateOutputType | null
    _max: JoueurMaxAggregateOutputType | null
  }

  export type JoueurAvgAggregateOutputType = {
    id_joueur: number | null
    id_equipe: number | null
  }

  export type JoueurSumAggregateOutputType = {
    id_joueur: number | null
    id_equipe: number | null
  }

  export type JoueurMinAggregateOutputType = {
    id_joueur: number | null
    nom: string | null
    prenom: string | null
    id_equipe: number | null
  }

  export type JoueurMaxAggregateOutputType = {
    id_joueur: number | null
    nom: string | null
    prenom: string | null
    id_equipe: number | null
  }

  export type JoueurCountAggregateOutputType = {
    id_joueur: number
    nom: number
    prenom: number
    id_equipe: number
    _all: number
  }


  export type JoueurAvgAggregateInputType = {
    id_joueur?: true
    id_equipe?: true
  }

  export type JoueurSumAggregateInputType = {
    id_joueur?: true
    id_equipe?: true
  }

  export type JoueurMinAggregateInputType = {
    id_joueur?: true
    nom?: true
    prenom?: true
    id_equipe?: true
  }

  export type JoueurMaxAggregateInputType = {
    id_joueur?: true
    nom?: true
    prenom?: true
    id_equipe?: true
  }

  export type JoueurCountAggregateInputType = {
    id_joueur?: true
    nom?: true
    prenom?: true
    id_equipe?: true
    _all?: true
  }

  export type JoueurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Joueur to aggregate.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Joueurs
    **/
    _count?: true | JoueurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JoueurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JoueurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JoueurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JoueurMaxAggregateInputType
  }

  export type GetJoueurAggregateType<T extends JoueurAggregateArgs> = {
        [P in keyof T & keyof AggregateJoueur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJoueur[P]>
      : GetScalarType<T[P], AggregateJoueur[P]>
  }




  export type JoueurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JoueurWhereInput
    orderBy?: JoueurOrderByWithAggregationInput | JoueurOrderByWithAggregationInput[]
    by: JoueurScalarFieldEnum[] | JoueurScalarFieldEnum
    having?: JoueurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JoueurCountAggregateInputType | true
    _avg?: JoueurAvgAggregateInputType
    _sum?: JoueurSumAggregateInputType
    _min?: JoueurMinAggregateInputType
    _max?: JoueurMaxAggregateInputType
  }

  export type JoueurGroupByOutputType = {
    id_joueur: number
    nom: string
    prenom: string
    id_equipe: number
    _count: JoueurCountAggregateOutputType | null
    _avg: JoueurAvgAggregateOutputType | null
    _sum: JoueurSumAggregateOutputType | null
    _min: JoueurMinAggregateOutputType | null
    _max: JoueurMaxAggregateOutputType | null
  }

  type GetJoueurGroupByPayload<T extends JoueurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JoueurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JoueurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JoueurGroupByOutputType[P]>
            : GetScalarType<T[P], JoueurGroupByOutputType[P]>
        }
      >
    >


  export type JoueurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_joueur?: boolean
    nom?: boolean
    prenom?: boolean
    id_equipe?: boolean
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
    imagejoueur?: boolean | Joueur$imagejoueurArgs<ExtArgs>
    _count?: boolean | JoueurCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["joueur"]>

  export type JoueurSelectScalar = {
    id_joueur?: boolean
    nom?: boolean
    prenom?: boolean
    id_equipe?: boolean
  }


  export type JoueurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipe?: boolean | EquipeDefaultArgs<ExtArgs>
    imagejoueur?: boolean | Joueur$imagejoueurArgs<ExtArgs>
    _count?: boolean | JoueurCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $JoueurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Joueur"
    objects: {
      equipe: Prisma.$EquipePayload<ExtArgs>
      imagejoueur: Prisma.$ImageJoueurPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_joueur: number
      nom: string
      prenom: string
      id_equipe: number
    }, ExtArgs["result"]["joueur"]>
    composites: {}
  }


  type JoueurGetPayload<S extends boolean | null | undefined | JoueurDefaultArgs> = $Result.GetResult<Prisma.$JoueurPayload, S>

  type JoueurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JoueurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JoueurCountAggregateInputType | true
    }

  export interface JoueurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Joueur'], meta: { name: 'Joueur' } }
    /**
     * Find zero or one Joueur that matches the filter.
     * @param {JoueurFindUniqueArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JoueurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JoueurFindUniqueArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Joueur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JoueurFindUniqueOrThrowArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JoueurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JoueurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Joueur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFindFirstArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JoueurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JoueurFindFirstArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Joueur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFindFirstOrThrowArgs} args - Arguments to find a Joueur
     * @example
     * // Get one Joueur
     * const joueur = await prisma.joueur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JoueurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JoueurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Joueurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Joueurs
     * const joueurs = await prisma.joueur.findMany()
     * 
     * // Get first 10 Joueurs
     * const joueurs = await prisma.joueur.findMany({ take: 10 })
     * 
     * // Only select the `id_joueur`
     * const joueurWithId_joueurOnly = await prisma.joueur.findMany({ select: { id_joueur: true } })
     * 
    **/
    findMany<T extends JoueurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JoueurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Joueur.
     * @param {JoueurCreateArgs} args - Arguments to create a Joueur.
     * @example
     * // Create one Joueur
     * const Joueur = await prisma.joueur.create({
     *   data: {
     *     // ... data to create a Joueur
     *   }
     * })
     * 
    **/
    create<T extends JoueurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JoueurCreateArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Joueurs.
     * @param {JoueurCreateManyArgs} args - Arguments to create many Joueurs.
     * @example
     * // Create many Joueurs
     * const joueur = await prisma.joueur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends JoueurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JoueurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Joueurs and returns the data saved in the database.
     * @param {JoueurCreateManyAndReturnArgs} args - Arguments to create many Joueurs.
     * @example
     * // Create many Joueurs
     * const joueur = await prisma.joueur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Joueurs and only return the `id_joueur`
     * const joueurWithId_joueurOnly = await prisma.joueur.createManyAndReturn({ 
     *   select: { id_joueur: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends JoueurCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, JoueurCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Joueur.
     * @param {JoueurDeleteArgs} args - Arguments to delete one Joueur.
     * @example
     * // Delete one Joueur
     * const Joueur = await prisma.joueur.delete({
     *   where: {
     *     // ... filter to delete one Joueur
     *   }
     * })
     * 
    **/
    delete<T extends JoueurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JoueurDeleteArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Joueur.
     * @param {JoueurUpdateArgs} args - Arguments to update one Joueur.
     * @example
     * // Update one Joueur
     * const joueur = await prisma.joueur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JoueurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JoueurUpdateArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Joueurs.
     * @param {JoueurDeleteManyArgs} args - Arguments to filter Joueurs to delete.
     * @example
     * // Delete a few Joueurs
     * const { count } = await prisma.joueur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JoueurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JoueurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Joueurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Joueurs
     * const joueur = await prisma.joueur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JoueurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JoueurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Joueur.
     * @param {JoueurUpsertArgs} args - Arguments to update or create a Joueur.
     * @example
     * // Update or create a Joueur
     * const joueur = await prisma.joueur.upsert({
     *   create: {
     *     // ... data to create a Joueur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Joueur we want to update
     *   }
     * })
    **/
    upsert<T extends JoueurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JoueurUpsertArgs<ExtArgs>>
    ): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Joueurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurCountArgs} args - Arguments to filter Joueurs to count.
     * @example
     * // Count the number of Joueurs
     * const count = await prisma.joueur.count({
     *   where: {
     *     // ... the filter for the Joueurs we want to count
     *   }
     * })
    **/
    count<T extends JoueurCountArgs>(
      args?: Subset<T, JoueurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JoueurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Joueur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JoueurAggregateArgs>(args: Subset<T, JoueurAggregateArgs>): Prisma.PrismaPromise<GetJoueurAggregateType<T>>

    /**
     * Group by Joueur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JoueurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JoueurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JoueurGroupByArgs['orderBy'] }
        : { orderBy?: JoueurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JoueurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJoueurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Joueur model
   */
  readonly fields: JoueurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Joueur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JoueurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    equipe<T extends EquipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EquipeDefaultArgs<ExtArgs>>): Prisma__EquipeClient<$Result.GetResult<Prisma.$EquipePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    imagejoueur<T extends Joueur$imagejoueurArgs<ExtArgs> = {}>(args?: Subset<T, Joueur$imagejoueurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Joueur model
   */ 
  interface JoueurFieldRefs {
    readonly id_joueur: FieldRef<"Joueur", 'Int'>
    readonly nom: FieldRef<"Joueur", 'String'>
    readonly prenom: FieldRef<"Joueur", 'String'>
    readonly id_equipe: FieldRef<"Joueur", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Joueur findUnique
   */
  export type JoueurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur findUniqueOrThrow
   */
  export type JoueurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur findFirst
   */
  export type JoueurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joueurs.
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joueurs.
     */
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Joueur findFirstOrThrow
   */
  export type JoueurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueur to fetch.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Joueurs.
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Joueurs.
     */
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Joueur findMany
   */
  export type JoueurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter, which Joueurs to fetch.
     */
    where?: JoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Joueurs to fetch.
     */
    orderBy?: JoueurOrderByWithRelationInput | JoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Joueurs.
     */
    cursor?: JoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Joueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Joueurs.
     */
    skip?: number
    distinct?: JoueurScalarFieldEnum | JoueurScalarFieldEnum[]
  }

  /**
   * Joueur create
   */
  export type JoueurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * The data needed to create a Joueur.
     */
    data: XOR<JoueurCreateInput, JoueurUncheckedCreateInput>
  }

  /**
   * Joueur createMany
   */
  export type JoueurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Joueurs.
     */
    data: JoueurCreateManyInput | JoueurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Joueur createManyAndReturn
   */
  export type JoueurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * The data used to create many Joueurs.
     */
    data: JoueurCreateManyInput | JoueurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Joueur update
   */
  export type JoueurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * The data needed to update a Joueur.
     */
    data: XOR<JoueurUpdateInput, JoueurUncheckedUpdateInput>
    /**
     * Choose, which Joueur to update.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur updateMany
   */
  export type JoueurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Joueurs.
     */
    data: XOR<JoueurUpdateManyMutationInput, JoueurUncheckedUpdateManyInput>
    /**
     * Filter which Joueurs to update
     */
    where?: JoueurWhereInput
  }

  /**
   * Joueur upsert
   */
  export type JoueurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * The filter to search for the Joueur to update in case it exists.
     */
    where: JoueurWhereUniqueInput
    /**
     * In case the Joueur found by the `where` argument doesn't exist, create a new Joueur with this data.
     */
    create: XOR<JoueurCreateInput, JoueurUncheckedCreateInput>
    /**
     * In case the Joueur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JoueurUpdateInput, JoueurUncheckedUpdateInput>
  }

  /**
   * Joueur delete
   */
  export type JoueurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
    /**
     * Filter which Joueur to delete.
     */
    where: JoueurWhereUniqueInput
  }

  /**
   * Joueur deleteMany
   */
  export type JoueurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Joueurs to delete
     */
    where?: JoueurWhereInput
  }

  /**
   * Joueur.imagejoueur
   */
  export type Joueur$imagejoueurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    where?: ImageJoueurWhereInput
    orderBy?: ImageJoueurOrderByWithRelationInput | ImageJoueurOrderByWithRelationInput[]
    cursor?: ImageJoueurWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageJoueurScalarFieldEnum | ImageJoueurScalarFieldEnum[]
  }

  /**
   * Joueur without action
   */
  export type JoueurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Joueur
     */
    select?: JoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JoueurInclude<ExtArgs> | null
  }


  /**
   * Model ImageJoueur
   */

  export type AggregateImageJoueur = {
    _count: ImageJoueurCountAggregateOutputType | null
    _avg: ImageJoueurAvgAggregateOutputType | null
    _sum: ImageJoueurSumAggregateOutputType | null
    _min: ImageJoueurMinAggregateOutputType | null
    _max: ImageJoueurMaxAggregateOutputType | null
  }

  export type ImageJoueurAvgAggregateOutputType = {
    id_photo: number | null
    id_joueur: number | null
  }

  export type ImageJoueurSumAggregateOutputType = {
    id_photo: number | null
    id_joueur: number | null
  }

  export type ImageJoueurMinAggregateOutputType = {
    id_photo: number | null
    nom: string | null
    id_joueur: number | null
  }

  export type ImageJoueurMaxAggregateOutputType = {
    id_photo: number | null
    nom: string | null
    id_joueur: number | null
  }

  export type ImageJoueurCountAggregateOutputType = {
    id_photo: number
    nom: number
    id_joueur: number
    _all: number
  }


  export type ImageJoueurAvgAggregateInputType = {
    id_photo?: true
    id_joueur?: true
  }

  export type ImageJoueurSumAggregateInputType = {
    id_photo?: true
    id_joueur?: true
  }

  export type ImageJoueurMinAggregateInputType = {
    id_photo?: true
    nom?: true
    id_joueur?: true
  }

  export type ImageJoueurMaxAggregateInputType = {
    id_photo?: true
    nom?: true
    id_joueur?: true
  }

  export type ImageJoueurCountAggregateInputType = {
    id_photo?: true
    nom?: true
    id_joueur?: true
    _all?: true
  }

  export type ImageJoueurAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ImageJoueur to aggregate.
     */
    where?: ImageJoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageJoueurs to fetch.
     */
    orderBy?: ImageJoueurOrderByWithRelationInput | ImageJoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageJoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageJoueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageJoueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ImageJoueurs
    **/
    _count?: true | ImageJoueurCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageJoueurAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageJoueurSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageJoueurMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageJoueurMaxAggregateInputType
  }

  export type GetImageJoueurAggregateType<T extends ImageJoueurAggregateArgs> = {
        [P in keyof T & keyof AggregateImageJoueur]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImageJoueur[P]>
      : GetScalarType<T[P], AggregateImageJoueur[P]>
  }




  export type ImageJoueurGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageJoueurWhereInput
    orderBy?: ImageJoueurOrderByWithAggregationInput | ImageJoueurOrderByWithAggregationInput[]
    by: ImageJoueurScalarFieldEnum[] | ImageJoueurScalarFieldEnum
    having?: ImageJoueurScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageJoueurCountAggregateInputType | true
    _avg?: ImageJoueurAvgAggregateInputType
    _sum?: ImageJoueurSumAggregateInputType
    _min?: ImageJoueurMinAggregateInputType
    _max?: ImageJoueurMaxAggregateInputType
  }

  export type ImageJoueurGroupByOutputType = {
    id_photo: number
    nom: string
    id_joueur: number
    _count: ImageJoueurCountAggregateOutputType | null
    _avg: ImageJoueurAvgAggregateOutputType | null
    _sum: ImageJoueurSumAggregateOutputType | null
    _min: ImageJoueurMinAggregateOutputType | null
    _max: ImageJoueurMaxAggregateOutputType | null
  }

  type GetImageJoueurGroupByPayload<T extends ImageJoueurGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageJoueurGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageJoueurGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageJoueurGroupByOutputType[P]>
            : GetScalarType<T[P], ImageJoueurGroupByOutputType[P]>
        }
      >
    >


  export type ImageJoueurSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_photo?: boolean
    nom?: boolean
    id_joueur?: boolean
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imageJoueur"]>

  export type ImageJoueurSelectScalar = {
    id_photo?: boolean
    nom?: boolean
    id_joueur?: boolean
  }


  export type ImageJoueurInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    joueur?: boolean | JoueurDefaultArgs<ExtArgs>
  }


  export type $ImageJoueurPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ImageJoueur"
    objects: {
      joueur: Prisma.$JoueurPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_photo: number
      nom: string
      id_joueur: number
    }, ExtArgs["result"]["imageJoueur"]>
    composites: {}
  }


  type ImageJoueurGetPayload<S extends boolean | null | undefined | ImageJoueurDefaultArgs> = $Result.GetResult<Prisma.$ImageJoueurPayload, S>

  type ImageJoueurCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImageJoueurFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImageJoueurCountAggregateInputType | true
    }

  export interface ImageJoueurDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ImageJoueur'], meta: { name: 'ImageJoueur' } }
    /**
     * Find zero or one ImageJoueur that matches the filter.
     * @param {ImageJoueurFindUniqueArgs} args - Arguments to find a ImageJoueur
     * @example
     * // Get one ImageJoueur
     * const imageJoueur = await prisma.imageJoueur.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageJoueurFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ImageJoueurFindUniqueArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ImageJoueur that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ImageJoueurFindUniqueOrThrowArgs} args - Arguments to find a ImageJoueur
     * @example
     * // Get one ImageJoueur
     * const imageJoueur = await prisma.imageJoueur.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImageJoueurFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageJoueurFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ImageJoueur that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageJoueurFindFirstArgs} args - Arguments to find a ImageJoueur
     * @example
     * // Get one ImageJoueur
     * const imageJoueur = await prisma.imageJoueur.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageJoueurFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageJoueurFindFirstArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ImageJoueur that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageJoueurFindFirstOrThrowArgs} args - Arguments to find a ImageJoueur
     * @example
     * // Get one ImageJoueur
     * const imageJoueur = await prisma.imageJoueur.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImageJoueurFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageJoueurFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ImageJoueurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageJoueurFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImageJoueurs
     * const imageJoueurs = await prisma.imageJoueur.findMany()
     * 
     * // Get first 10 ImageJoueurs
     * const imageJoueurs = await prisma.imageJoueur.findMany({ take: 10 })
     * 
     * // Only select the `id_photo`
     * const imageJoueurWithId_photoOnly = await prisma.imageJoueur.findMany({ select: { id_photo: true } })
     * 
    **/
    findMany<T extends ImageJoueurFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageJoueurFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ImageJoueur.
     * @param {ImageJoueurCreateArgs} args - Arguments to create a ImageJoueur.
     * @example
     * // Create one ImageJoueur
     * const ImageJoueur = await prisma.imageJoueur.create({
     *   data: {
     *     // ... data to create a ImageJoueur
     *   }
     * })
     * 
    **/
    create<T extends ImageJoueurCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageJoueurCreateArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ImageJoueurs.
     * @param {ImageJoueurCreateManyArgs} args - Arguments to create many ImageJoueurs.
     * @example
     * // Create many ImageJoueurs
     * const imageJoueur = await prisma.imageJoueur.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ImageJoueurCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageJoueurCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ImageJoueurs and returns the data saved in the database.
     * @param {ImageJoueurCreateManyAndReturnArgs} args - Arguments to create many ImageJoueurs.
     * @example
     * // Create many ImageJoueurs
     * const imageJoueur = await prisma.imageJoueur.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ImageJoueurs and only return the `id_photo`
     * const imageJoueurWithId_photoOnly = await prisma.imageJoueur.createManyAndReturn({ 
     *   select: { id_photo: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ImageJoueurCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageJoueurCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a ImageJoueur.
     * @param {ImageJoueurDeleteArgs} args - Arguments to delete one ImageJoueur.
     * @example
     * // Delete one ImageJoueur
     * const ImageJoueur = await prisma.imageJoueur.delete({
     *   where: {
     *     // ... filter to delete one ImageJoueur
     *   }
     * })
     * 
    **/
    delete<T extends ImageJoueurDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ImageJoueurDeleteArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ImageJoueur.
     * @param {ImageJoueurUpdateArgs} args - Arguments to update one ImageJoueur.
     * @example
     * // Update one ImageJoueur
     * const imageJoueur = await prisma.imageJoueur.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageJoueurUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageJoueurUpdateArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ImageJoueurs.
     * @param {ImageJoueurDeleteManyArgs} args - Arguments to filter ImageJoueurs to delete.
     * @example
     * // Delete a few ImageJoueurs
     * const { count } = await prisma.imageJoueur.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageJoueurDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageJoueurDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageJoueurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageJoueurUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImageJoueurs
     * const imageJoueur = await prisma.imageJoueur.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageJoueurUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ImageJoueurUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ImageJoueur.
     * @param {ImageJoueurUpsertArgs} args - Arguments to update or create a ImageJoueur.
     * @example
     * // Update or create a ImageJoueur
     * const imageJoueur = await prisma.imageJoueur.upsert({
     *   create: {
     *     // ... data to create a ImageJoueur
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImageJoueur we want to update
     *   }
     * })
    **/
    upsert<T extends ImageJoueurUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ImageJoueurUpsertArgs<ExtArgs>>
    ): Prisma__ImageJoueurClient<$Result.GetResult<Prisma.$ImageJoueurPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ImageJoueurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageJoueurCountArgs} args - Arguments to filter ImageJoueurs to count.
     * @example
     * // Count the number of ImageJoueurs
     * const count = await prisma.imageJoueur.count({
     *   where: {
     *     // ... the filter for the ImageJoueurs we want to count
     *   }
     * })
    **/
    count<T extends ImageJoueurCountArgs>(
      args?: Subset<T, ImageJoueurCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageJoueurCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImageJoueur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageJoueurAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageJoueurAggregateArgs>(args: Subset<T, ImageJoueurAggregateArgs>): Prisma.PrismaPromise<GetImageJoueurAggregateType<T>>

    /**
     * Group by ImageJoueur.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageJoueurGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageJoueurGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageJoueurGroupByArgs['orderBy'] }
        : { orderBy?: ImageJoueurGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageJoueurGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageJoueurGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ImageJoueur model
   */
  readonly fields: ImageJoueurFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ImageJoueur.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageJoueurClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    joueur<T extends JoueurDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JoueurDefaultArgs<ExtArgs>>): Prisma__JoueurClient<$Result.GetResult<Prisma.$JoueurPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ImageJoueur model
   */ 
  interface ImageJoueurFieldRefs {
    readonly id_photo: FieldRef<"ImageJoueur", 'Int'>
    readonly nom: FieldRef<"ImageJoueur", 'String'>
    readonly id_joueur: FieldRef<"ImageJoueur", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ImageJoueur findUnique
   */
  export type ImageJoueurFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * Filter, which ImageJoueur to fetch.
     */
    where: ImageJoueurWhereUniqueInput
  }

  /**
   * ImageJoueur findUniqueOrThrow
   */
  export type ImageJoueurFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * Filter, which ImageJoueur to fetch.
     */
    where: ImageJoueurWhereUniqueInput
  }

  /**
   * ImageJoueur findFirst
   */
  export type ImageJoueurFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * Filter, which ImageJoueur to fetch.
     */
    where?: ImageJoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageJoueurs to fetch.
     */
    orderBy?: ImageJoueurOrderByWithRelationInput | ImageJoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImageJoueurs.
     */
    cursor?: ImageJoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageJoueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageJoueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImageJoueurs.
     */
    distinct?: ImageJoueurScalarFieldEnum | ImageJoueurScalarFieldEnum[]
  }

  /**
   * ImageJoueur findFirstOrThrow
   */
  export type ImageJoueurFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * Filter, which ImageJoueur to fetch.
     */
    where?: ImageJoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageJoueurs to fetch.
     */
    orderBy?: ImageJoueurOrderByWithRelationInput | ImageJoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImageJoueurs.
     */
    cursor?: ImageJoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageJoueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageJoueurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImageJoueurs.
     */
    distinct?: ImageJoueurScalarFieldEnum | ImageJoueurScalarFieldEnum[]
  }

  /**
   * ImageJoueur findMany
   */
  export type ImageJoueurFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * Filter, which ImageJoueurs to fetch.
     */
    where?: ImageJoueurWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageJoueurs to fetch.
     */
    orderBy?: ImageJoueurOrderByWithRelationInput | ImageJoueurOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ImageJoueurs.
     */
    cursor?: ImageJoueurWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageJoueurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageJoueurs.
     */
    skip?: number
    distinct?: ImageJoueurScalarFieldEnum | ImageJoueurScalarFieldEnum[]
  }

  /**
   * ImageJoueur create
   */
  export type ImageJoueurCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * The data needed to create a ImageJoueur.
     */
    data: XOR<ImageJoueurCreateInput, ImageJoueurUncheckedCreateInput>
  }

  /**
   * ImageJoueur createMany
   */
  export type ImageJoueurCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ImageJoueurs.
     */
    data: ImageJoueurCreateManyInput | ImageJoueurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ImageJoueur createManyAndReturn
   */
  export type ImageJoueurCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * The data used to create many ImageJoueurs.
     */
    data: ImageJoueurCreateManyInput | ImageJoueurCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ImageJoueur update
   */
  export type ImageJoueurUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * The data needed to update a ImageJoueur.
     */
    data: XOR<ImageJoueurUpdateInput, ImageJoueurUncheckedUpdateInput>
    /**
     * Choose, which ImageJoueur to update.
     */
    where: ImageJoueurWhereUniqueInput
  }

  /**
   * ImageJoueur updateMany
   */
  export type ImageJoueurUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ImageJoueurs.
     */
    data: XOR<ImageJoueurUpdateManyMutationInput, ImageJoueurUncheckedUpdateManyInput>
    /**
     * Filter which ImageJoueurs to update
     */
    where?: ImageJoueurWhereInput
  }

  /**
   * ImageJoueur upsert
   */
  export type ImageJoueurUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * The filter to search for the ImageJoueur to update in case it exists.
     */
    where: ImageJoueurWhereUniqueInput
    /**
     * In case the ImageJoueur found by the `where` argument doesn't exist, create a new ImageJoueur with this data.
     */
    create: XOR<ImageJoueurCreateInput, ImageJoueurUncheckedCreateInput>
    /**
     * In case the ImageJoueur was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageJoueurUpdateInput, ImageJoueurUncheckedUpdateInput>
  }

  /**
   * ImageJoueur delete
   */
  export type ImageJoueurDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
    /**
     * Filter which ImageJoueur to delete.
     */
    where: ImageJoueurWhereUniqueInput
  }

  /**
   * ImageJoueur deleteMany
   */
  export type ImageJoueurDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ImageJoueurs to delete
     */
    where?: ImageJoueurWhereInput
  }

  /**
   * ImageJoueur without action
   */
  export type ImageJoueurDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageJoueur
     */
    select?: ImageJoueurSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageJoueurInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id_user: 'id_user',
    pseudo: 'pseudo',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EquipeScalarFieldEnum: {
    id_equipe: 'id_equipe',
    nom: 'nom'
  };

  export type EquipeScalarFieldEnum = (typeof EquipeScalarFieldEnum)[keyof typeof EquipeScalarFieldEnum]


  export const JoueurScalarFieldEnum: {
    id_joueur: 'id_joueur',
    nom: 'nom',
    prenom: 'prenom',
    id_equipe: 'id_equipe'
  };

  export type JoueurScalarFieldEnum = (typeof JoueurScalarFieldEnum)[keyof typeof JoueurScalarFieldEnum]


  export const ImageJoueurScalarFieldEnum: {
    id_photo: 'id_photo',
    nom: 'nom',
    id_joueur: 'id_joueur'
  };

  export type ImageJoueurScalarFieldEnum = (typeof ImageJoueurScalarFieldEnum)[keyof typeof ImageJoueurScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id_user?: StringFilter<"User"> | string
    pseudo?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    id_user?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id_user?: string
    pseudo?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
  }, "id_user" | "pseudo">

  export type UserOrderByWithAggregationInput = {
    id_user?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id_user?: StringWithAggregatesFilter<"User"> | string
    pseudo?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type EquipeWhereInput = {
    AND?: EquipeWhereInput | EquipeWhereInput[]
    OR?: EquipeWhereInput[]
    NOT?: EquipeWhereInput | EquipeWhereInput[]
    id_equipe?: IntFilter<"Equipe"> | number
    nom?: StringFilter<"Equipe"> | string
    joueur?: JoueurListRelationFilter
  }

  export type EquipeOrderByWithRelationInput = {
    id_equipe?: SortOrder
    nom?: SortOrder
    joueur?: JoueurOrderByRelationAggregateInput
  }

  export type EquipeWhereUniqueInput = Prisma.AtLeast<{
    id_equipe?: number
    AND?: EquipeWhereInput | EquipeWhereInput[]
    OR?: EquipeWhereInput[]
    NOT?: EquipeWhereInput | EquipeWhereInput[]
    nom?: StringFilter<"Equipe"> | string
    joueur?: JoueurListRelationFilter
  }, "id_equipe">

  export type EquipeOrderByWithAggregationInput = {
    id_equipe?: SortOrder
    nom?: SortOrder
    _count?: EquipeCountOrderByAggregateInput
    _avg?: EquipeAvgOrderByAggregateInput
    _max?: EquipeMaxOrderByAggregateInput
    _min?: EquipeMinOrderByAggregateInput
    _sum?: EquipeSumOrderByAggregateInput
  }

  export type EquipeScalarWhereWithAggregatesInput = {
    AND?: EquipeScalarWhereWithAggregatesInput | EquipeScalarWhereWithAggregatesInput[]
    OR?: EquipeScalarWhereWithAggregatesInput[]
    NOT?: EquipeScalarWhereWithAggregatesInput | EquipeScalarWhereWithAggregatesInput[]
    id_equipe?: IntWithAggregatesFilter<"Equipe"> | number
    nom?: StringWithAggregatesFilter<"Equipe"> | string
  }

  export type JoueurWhereInput = {
    AND?: JoueurWhereInput | JoueurWhereInput[]
    OR?: JoueurWhereInput[]
    NOT?: JoueurWhereInput | JoueurWhereInput[]
    id_joueur?: IntFilter<"Joueur"> | number
    nom?: StringFilter<"Joueur"> | string
    prenom?: StringFilter<"Joueur"> | string
    id_equipe?: IntFilter<"Joueur"> | number
    equipe?: XOR<EquipeRelationFilter, EquipeWhereInput>
    imagejoueur?: ImageJoueurListRelationFilter
  }

  export type JoueurOrderByWithRelationInput = {
    id_joueur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    id_equipe?: SortOrder
    equipe?: EquipeOrderByWithRelationInput
    imagejoueur?: ImageJoueurOrderByRelationAggregateInput
  }

  export type JoueurWhereUniqueInput = Prisma.AtLeast<{
    id_joueur?: number
    AND?: JoueurWhereInput | JoueurWhereInput[]
    OR?: JoueurWhereInput[]
    NOT?: JoueurWhereInput | JoueurWhereInput[]
    nom?: StringFilter<"Joueur"> | string
    prenom?: StringFilter<"Joueur"> | string
    id_equipe?: IntFilter<"Joueur"> | number
    equipe?: XOR<EquipeRelationFilter, EquipeWhereInput>
    imagejoueur?: ImageJoueurListRelationFilter
  }, "id_joueur">

  export type JoueurOrderByWithAggregationInput = {
    id_joueur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    id_equipe?: SortOrder
    _count?: JoueurCountOrderByAggregateInput
    _avg?: JoueurAvgOrderByAggregateInput
    _max?: JoueurMaxOrderByAggregateInput
    _min?: JoueurMinOrderByAggregateInput
    _sum?: JoueurSumOrderByAggregateInput
  }

  export type JoueurScalarWhereWithAggregatesInput = {
    AND?: JoueurScalarWhereWithAggregatesInput | JoueurScalarWhereWithAggregatesInput[]
    OR?: JoueurScalarWhereWithAggregatesInput[]
    NOT?: JoueurScalarWhereWithAggregatesInput | JoueurScalarWhereWithAggregatesInput[]
    id_joueur?: IntWithAggregatesFilter<"Joueur"> | number
    nom?: StringWithAggregatesFilter<"Joueur"> | string
    prenom?: StringWithAggregatesFilter<"Joueur"> | string
    id_equipe?: IntWithAggregatesFilter<"Joueur"> | number
  }

  export type ImageJoueurWhereInput = {
    AND?: ImageJoueurWhereInput | ImageJoueurWhereInput[]
    OR?: ImageJoueurWhereInput[]
    NOT?: ImageJoueurWhereInput | ImageJoueurWhereInput[]
    id_photo?: IntFilter<"ImageJoueur"> | number
    nom?: StringFilter<"ImageJoueur"> | string
    id_joueur?: IntFilter<"ImageJoueur"> | number
    joueur?: XOR<JoueurRelationFilter, JoueurWhereInput>
  }

  export type ImageJoueurOrderByWithRelationInput = {
    id_photo?: SortOrder
    nom?: SortOrder
    id_joueur?: SortOrder
    joueur?: JoueurOrderByWithRelationInput
  }

  export type ImageJoueurWhereUniqueInput = Prisma.AtLeast<{
    id_photo?: number
    AND?: ImageJoueurWhereInput | ImageJoueurWhereInput[]
    OR?: ImageJoueurWhereInput[]
    NOT?: ImageJoueurWhereInput | ImageJoueurWhereInput[]
    nom?: StringFilter<"ImageJoueur"> | string
    id_joueur?: IntFilter<"ImageJoueur"> | number
    joueur?: XOR<JoueurRelationFilter, JoueurWhereInput>
  }, "id_photo">

  export type ImageJoueurOrderByWithAggregationInput = {
    id_photo?: SortOrder
    nom?: SortOrder
    id_joueur?: SortOrder
    _count?: ImageJoueurCountOrderByAggregateInput
    _avg?: ImageJoueurAvgOrderByAggregateInput
    _max?: ImageJoueurMaxOrderByAggregateInput
    _min?: ImageJoueurMinOrderByAggregateInput
    _sum?: ImageJoueurSumOrderByAggregateInput
  }

  export type ImageJoueurScalarWhereWithAggregatesInput = {
    AND?: ImageJoueurScalarWhereWithAggregatesInput | ImageJoueurScalarWhereWithAggregatesInput[]
    OR?: ImageJoueurScalarWhereWithAggregatesInput[]
    NOT?: ImageJoueurScalarWhereWithAggregatesInput | ImageJoueurScalarWhereWithAggregatesInput[]
    id_photo?: IntWithAggregatesFilter<"ImageJoueur"> | number
    nom?: StringWithAggregatesFilter<"ImageJoueur"> | string
    id_joueur?: IntWithAggregatesFilter<"ImageJoueur"> | number
  }

  export type UserCreateInput = {
    id_user?: string
    pseudo: string
    password: string
  }

  export type UserUncheckedCreateInput = {
    id_user?: string
    pseudo: string
    password: string
  }

  export type UserUpdateInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id_user?: string
    pseudo: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id_user?: StringFieldUpdateOperationsInput | string
    pseudo?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EquipeCreateInput = {
    nom: string
    joueur?: JoueurCreateNestedManyWithoutEquipeInput
  }

  export type EquipeUncheckedCreateInput = {
    id_equipe?: number
    nom: string
    joueur?: JoueurUncheckedCreateNestedManyWithoutEquipeInput
  }

  export type EquipeUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    joueur?: JoueurUpdateManyWithoutEquipeNestedInput
  }

  export type EquipeUncheckedUpdateInput = {
    id_equipe?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    joueur?: JoueurUncheckedUpdateManyWithoutEquipeNestedInput
  }

  export type EquipeCreateManyInput = {
    id_equipe?: number
    nom: string
  }

  export type EquipeUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type EquipeUncheckedUpdateManyInput = {
    id_equipe?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type JoueurCreateInput = {
    nom: string
    prenom: string
    equipe: EquipeCreateNestedOneWithoutJoueurInput
    imagejoueur?: ImageJoueurCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUncheckedCreateInput = {
    id_joueur?: number
    nom: string
    prenom: string
    id_equipe: number
    imagejoueur?: ImageJoueurUncheckedCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    equipe?: EquipeUpdateOneRequiredWithoutJoueurNestedInput
    imagejoueur?: ImageJoueurUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateInput = {
    id_joueur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    id_equipe?: IntFieldUpdateOperationsInput | number
    imagejoueur?: ImageJoueurUncheckedUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurCreateManyInput = {
    id_joueur?: number
    nom: string
    prenom: string
    id_equipe: number
  }

  export type JoueurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
  }

  export type JoueurUncheckedUpdateManyInput = {
    id_joueur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    id_equipe?: IntFieldUpdateOperationsInput | number
  }

  export type ImageJoueurCreateInput = {
    nom: string
    joueur: JoueurCreateNestedOneWithoutImagejoueurInput
  }

  export type ImageJoueurUncheckedCreateInput = {
    id_photo?: number
    nom: string
    id_joueur: number
  }

  export type ImageJoueurUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    joueur?: JoueurUpdateOneRequiredWithoutImagejoueurNestedInput
  }

  export type ImageJoueurUncheckedUpdateInput = {
    id_photo?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    id_joueur?: IntFieldUpdateOperationsInput | number
  }

  export type ImageJoueurCreateManyInput = {
    id_photo?: number
    nom: string
    id_joueur: number
  }

  export type ImageJoueurUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ImageJoueurUncheckedUpdateManyInput = {
    id_photo?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    id_joueur?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    id_user?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id_user?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id_user?: SortOrder
    pseudo?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type JoueurListRelationFilter = {
    every?: JoueurWhereInput
    some?: JoueurWhereInput
    none?: JoueurWhereInput
  }

  export type JoueurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipeCountOrderByAggregateInput = {
    id_equipe?: SortOrder
    nom?: SortOrder
  }

  export type EquipeAvgOrderByAggregateInput = {
    id_equipe?: SortOrder
  }

  export type EquipeMaxOrderByAggregateInput = {
    id_equipe?: SortOrder
    nom?: SortOrder
  }

  export type EquipeMinOrderByAggregateInput = {
    id_equipe?: SortOrder
    nom?: SortOrder
  }

  export type EquipeSumOrderByAggregateInput = {
    id_equipe?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EquipeRelationFilter = {
    is?: EquipeWhereInput
    isNot?: EquipeWhereInput
  }

  export type ImageJoueurListRelationFilter = {
    every?: ImageJoueurWhereInput
    some?: ImageJoueurWhereInput
    none?: ImageJoueurWhereInput
  }

  export type ImageJoueurOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JoueurCountOrderByAggregateInput = {
    id_joueur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    id_equipe?: SortOrder
  }

  export type JoueurAvgOrderByAggregateInput = {
    id_joueur?: SortOrder
    id_equipe?: SortOrder
  }

  export type JoueurMaxOrderByAggregateInput = {
    id_joueur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    id_equipe?: SortOrder
  }

  export type JoueurMinOrderByAggregateInput = {
    id_joueur?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    id_equipe?: SortOrder
  }

  export type JoueurSumOrderByAggregateInput = {
    id_joueur?: SortOrder
    id_equipe?: SortOrder
  }

  export type JoueurRelationFilter = {
    is?: JoueurWhereInput
    isNot?: JoueurWhereInput
  }

  export type ImageJoueurCountOrderByAggregateInput = {
    id_photo?: SortOrder
    nom?: SortOrder
    id_joueur?: SortOrder
  }

  export type ImageJoueurAvgOrderByAggregateInput = {
    id_photo?: SortOrder
    id_joueur?: SortOrder
  }

  export type ImageJoueurMaxOrderByAggregateInput = {
    id_photo?: SortOrder
    nom?: SortOrder
    id_joueur?: SortOrder
  }

  export type ImageJoueurMinOrderByAggregateInput = {
    id_photo?: SortOrder
    nom?: SortOrder
    id_joueur?: SortOrder
  }

  export type ImageJoueurSumOrderByAggregateInput = {
    id_photo?: SortOrder
    id_joueur?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type JoueurCreateNestedManyWithoutEquipeInput = {
    create?: XOR<JoueurCreateWithoutEquipeInput, JoueurUncheckedCreateWithoutEquipeInput> | JoueurCreateWithoutEquipeInput[] | JoueurUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutEquipeInput | JoueurCreateOrConnectWithoutEquipeInput[]
    createMany?: JoueurCreateManyEquipeInputEnvelope
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
  }

  export type JoueurUncheckedCreateNestedManyWithoutEquipeInput = {
    create?: XOR<JoueurCreateWithoutEquipeInput, JoueurUncheckedCreateWithoutEquipeInput> | JoueurCreateWithoutEquipeInput[] | JoueurUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutEquipeInput | JoueurCreateOrConnectWithoutEquipeInput[]
    createMany?: JoueurCreateManyEquipeInputEnvelope
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
  }

  export type JoueurUpdateManyWithoutEquipeNestedInput = {
    create?: XOR<JoueurCreateWithoutEquipeInput, JoueurUncheckedCreateWithoutEquipeInput> | JoueurCreateWithoutEquipeInput[] | JoueurUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutEquipeInput | JoueurCreateOrConnectWithoutEquipeInput[]
    upsert?: JoueurUpsertWithWhereUniqueWithoutEquipeInput | JoueurUpsertWithWhereUniqueWithoutEquipeInput[]
    createMany?: JoueurCreateManyEquipeInputEnvelope
    set?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    disconnect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    delete?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    update?: JoueurUpdateWithWhereUniqueWithoutEquipeInput | JoueurUpdateWithWhereUniqueWithoutEquipeInput[]
    updateMany?: JoueurUpdateManyWithWhereWithoutEquipeInput | JoueurUpdateManyWithWhereWithoutEquipeInput[]
    deleteMany?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JoueurUncheckedUpdateManyWithoutEquipeNestedInput = {
    create?: XOR<JoueurCreateWithoutEquipeInput, JoueurUncheckedCreateWithoutEquipeInput> | JoueurCreateWithoutEquipeInput[] | JoueurUncheckedCreateWithoutEquipeInput[]
    connectOrCreate?: JoueurCreateOrConnectWithoutEquipeInput | JoueurCreateOrConnectWithoutEquipeInput[]
    upsert?: JoueurUpsertWithWhereUniqueWithoutEquipeInput | JoueurUpsertWithWhereUniqueWithoutEquipeInput[]
    createMany?: JoueurCreateManyEquipeInputEnvelope
    set?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    disconnect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    delete?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    connect?: JoueurWhereUniqueInput | JoueurWhereUniqueInput[]
    update?: JoueurUpdateWithWhereUniqueWithoutEquipeInput | JoueurUpdateWithWhereUniqueWithoutEquipeInput[]
    updateMany?: JoueurUpdateManyWithWhereWithoutEquipeInput | JoueurUpdateManyWithWhereWithoutEquipeInput[]
    deleteMany?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
  }

  export type EquipeCreateNestedOneWithoutJoueurInput = {
    create?: XOR<EquipeCreateWithoutJoueurInput, EquipeUncheckedCreateWithoutJoueurInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJoueurInput
    connect?: EquipeWhereUniqueInput
  }

  export type ImageJoueurCreateNestedManyWithoutJoueurInput = {
    create?: XOR<ImageJoueurCreateWithoutJoueurInput, ImageJoueurUncheckedCreateWithoutJoueurInput> | ImageJoueurCreateWithoutJoueurInput[] | ImageJoueurUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: ImageJoueurCreateOrConnectWithoutJoueurInput | ImageJoueurCreateOrConnectWithoutJoueurInput[]
    createMany?: ImageJoueurCreateManyJoueurInputEnvelope
    connect?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
  }

  export type ImageJoueurUncheckedCreateNestedManyWithoutJoueurInput = {
    create?: XOR<ImageJoueurCreateWithoutJoueurInput, ImageJoueurUncheckedCreateWithoutJoueurInput> | ImageJoueurCreateWithoutJoueurInput[] | ImageJoueurUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: ImageJoueurCreateOrConnectWithoutJoueurInput | ImageJoueurCreateOrConnectWithoutJoueurInput[]
    createMany?: ImageJoueurCreateManyJoueurInputEnvelope
    connect?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
  }

  export type EquipeUpdateOneRequiredWithoutJoueurNestedInput = {
    create?: XOR<EquipeCreateWithoutJoueurInput, EquipeUncheckedCreateWithoutJoueurInput>
    connectOrCreate?: EquipeCreateOrConnectWithoutJoueurInput
    upsert?: EquipeUpsertWithoutJoueurInput
    connect?: EquipeWhereUniqueInput
    update?: XOR<XOR<EquipeUpdateToOneWithWhereWithoutJoueurInput, EquipeUpdateWithoutJoueurInput>, EquipeUncheckedUpdateWithoutJoueurInput>
  }

  export type ImageJoueurUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<ImageJoueurCreateWithoutJoueurInput, ImageJoueurUncheckedCreateWithoutJoueurInput> | ImageJoueurCreateWithoutJoueurInput[] | ImageJoueurUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: ImageJoueurCreateOrConnectWithoutJoueurInput | ImageJoueurCreateOrConnectWithoutJoueurInput[]
    upsert?: ImageJoueurUpsertWithWhereUniqueWithoutJoueurInput | ImageJoueurUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: ImageJoueurCreateManyJoueurInputEnvelope
    set?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    disconnect?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    delete?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    connect?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    update?: ImageJoueurUpdateWithWhereUniqueWithoutJoueurInput | ImageJoueurUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: ImageJoueurUpdateManyWithWhereWithoutJoueurInput | ImageJoueurUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: ImageJoueurScalarWhereInput | ImageJoueurScalarWhereInput[]
  }

  export type ImageJoueurUncheckedUpdateManyWithoutJoueurNestedInput = {
    create?: XOR<ImageJoueurCreateWithoutJoueurInput, ImageJoueurUncheckedCreateWithoutJoueurInput> | ImageJoueurCreateWithoutJoueurInput[] | ImageJoueurUncheckedCreateWithoutJoueurInput[]
    connectOrCreate?: ImageJoueurCreateOrConnectWithoutJoueurInput | ImageJoueurCreateOrConnectWithoutJoueurInput[]
    upsert?: ImageJoueurUpsertWithWhereUniqueWithoutJoueurInput | ImageJoueurUpsertWithWhereUniqueWithoutJoueurInput[]
    createMany?: ImageJoueurCreateManyJoueurInputEnvelope
    set?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    disconnect?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    delete?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    connect?: ImageJoueurWhereUniqueInput | ImageJoueurWhereUniqueInput[]
    update?: ImageJoueurUpdateWithWhereUniqueWithoutJoueurInput | ImageJoueurUpdateWithWhereUniqueWithoutJoueurInput[]
    updateMany?: ImageJoueurUpdateManyWithWhereWithoutJoueurInput | ImageJoueurUpdateManyWithWhereWithoutJoueurInput[]
    deleteMany?: ImageJoueurScalarWhereInput | ImageJoueurScalarWhereInput[]
  }

  export type JoueurCreateNestedOneWithoutImagejoueurInput = {
    create?: XOR<JoueurCreateWithoutImagejoueurInput, JoueurUncheckedCreateWithoutImagejoueurInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutImagejoueurInput
    connect?: JoueurWhereUniqueInput
  }

  export type JoueurUpdateOneRequiredWithoutImagejoueurNestedInput = {
    create?: XOR<JoueurCreateWithoutImagejoueurInput, JoueurUncheckedCreateWithoutImagejoueurInput>
    connectOrCreate?: JoueurCreateOrConnectWithoutImagejoueurInput
    upsert?: JoueurUpsertWithoutImagejoueurInput
    connect?: JoueurWhereUniqueInput
    update?: XOR<XOR<JoueurUpdateToOneWithWhereWithoutImagejoueurInput, JoueurUpdateWithoutImagejoueurInput>, JoueurUncheckedUpdateWithoutImagejoueurInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type JoueurCreateWithoutEquipeInput = {
    nom: string
    prenom: string
    imagejoueur?: ImageJoueurCreateNestedManyWithoutJoueurInput
  }

  export type JoueurUncheckedCreateWithoutEquipeInput = {
    id_joueur?: number
    nom: string
    prenom: string
    imagejoueur?: ImageJoueurUncheckedCreateNestedManyWithoutJoueurInput
  }

  export type JoueurCreateOrConnectWithoutEquipeInput = {
    where: JoueurWhereUniqueInput
    create: XOR<JoueurCreateWithoutEquipeInput, JoueurUncheckedCreateWithoutEquipeInput>
  }

  export type JoueurCreateManyEquipeInputEnvelope = {
    data: JoueurCreateManyEquipeInput | JoueurCreateManyEquipeInput[]
    skipDuplicates?: boolean
  }

  export type JoueurUpsertWithWhereUniqueWithoutEquipeInput = {
    where: JoueurWhereUniqueInput
    update: XOR<JoueurUpdateWithoutEquipeInput, JoueurUncheckedUpdateWithoutEquipeInput>
    create: XOR<JoueurCreateWithoutEquipeInput, JoueurUncheckedCreateWithoutEquipeInput>
  }

  export type JoueurUpdateWithWhereUniqueWithoutEquipeInput = {
    where: JoueurWhereUniqueInput
    data: XOR<JoueurUpdateWithoutEquipeInput, JoueurUncheckedUpdateWithoutEquipeInput>
  }

  export type JoueurUpdateManyWithWhereWithoutEquipeInput = {
    where: JoueurScalarWhereInput
    data: XOR<JoueurUpdateManyMutationInput, JoueurUncheckedUpdateManyWithoutEquipeInput>
  }

  export type JoueurScalarWhereInput = {
    AND?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
    OR?: JoueurScalarWhereInput[]
    NOT?: JoueurScalarWhereInput | JoueurScalarWhereInput[]
    id_joueur?: IntFilter<"Joueur"> | number
    nom?: StringFilter<"Joueur"> | string
    prenom?: StringFilter<"Joueur"> | string
    id_equipe?: IntFilter<"Joueur"> | number
  }

  export type EquipeCreateWithoutJoueurInput = {
    nom: string
  }

  export type EquipeUncheckedCreateWithoutJoueurInput = {
    id_equipe?: number
    nom: string
  }

  export type EquipeCreateOrConnectWithoutJoueurInput = {
    where: EquipeWhereUniqueInput
    create: XOR<EquipeCreateWithoutJoueurInput, EquipeUncheckedCreateWithoutJoueurInput>
  }

  export type ImageJoueurCreateWithoutJoueurInput = {
    nom: string
  }

  export type ImageJoueurUncheckedCreateWithoutJoueurInput = {
    id_photo?: number
    nom: string
  }

  export type ImageJoueurCreateOrConnectWithoutJoueurInput = {
    where: ImageJoueurWhereUniqueInput
    create: XOR<ImageJoueurCreateWithoutJoueurInput, ImageJoueurUncheckedCreateWithoutJoueurInput>
  }

  export type ImageJoueurCreateManyJoueurInputEnvelope = {
    data: ImageJoueurCreateManyJoueurInput | ImageJoueurCreateManyJoueurInput[]
    skipDuplicates?: boolean
  }

  export type EquipeUpsertWithoutJoueurInput = {
    update: XOR<EquipeUpdateWithoutJoueurInput, EquipeUncheckedUpdateWithoutJoueurInput>
    create: XOR<EquipeCreateWithoutJoueurInput, EquipeUncheckedCreateWithoutJoueurInput>
    where?: EquipeWhereInput
  }

  export type EquipeUpdateToOneWithWhereWithoutJoueurInput = {
    where?: EquipeWhereInput
    data: XOR<EquipeUpdateWithoutJoueurInput, EquipeUncheckedUpdateWithoutJoueurInput>
  }

  export type EquipeUpdateWithoutJoueurInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type EquipeUncheckedUpdateWithoutJoueurInput = {
    id_equipe?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ImageJoueurUpsertWithWhereUniqueWithoutJoueurInput = {
    where: ImageJoueurWhereUniqueInput
    update: XOR<ImageJoueurUpdateWithoutJoueurInput, ImageJoueurUncheckedUpdateWithoutJoueurInput>
    create: XOR<ImageJoueurCreateWithoutJoueurInput, ImageJoueurUncheckedCreateWithoutJoueurInput>
  }

  export type ImageJoueurUpdateWithWhereUniqueWithoutJoueurInput = {
    where: ImageJoueurWhereUniqueInput
    data: XOR<ImageJoueurUpdateWithoutJoueurInput, ImageJoueurUncheckedUpdateWithoutJoueurInput>
  }

  export type ImageJoueurUpdateManyWithWhereWithoutJoueurInput = {
    where: ImageJoueurScalarWhereInput
    data: XOR<ImageJoueurUpdateManyMutationInput, ImageJoueurUncheckedUpdateManyWithoutJoueurInput>
  }

  export type ImageJoueurScalarWhereInput = {
    AND?: ImageJoueurScalarWhereInput | ImageJoueurScalarWhereInput[]
    OR?: ImageJoueurScalarWhereInput[]
    NOT?: ImageJoueurScalarWhereInput | ImageJoueurScalarWhereInput[]
    id_photo?: IntFilter<"ImageJoueur"> | number
    nom?: StringFilter<"ImageJoueur"> | string
    id_joueur?: IntFilter<"ImageJoueur"> | number
  }

  export type JoueurCreateWithoutImagejoueurInput = {
    nom: string
    prenom: string
    equipe: EquipeCreateNestedOneWithoutJoueurInput
  }

  export type JoueurUncheckedCreateWithoutImagejoueurInput = {
    id_joueur?: number
    nom: string
    prenom: string
    id_equipe: number
  }

  export type JoueurCreateOrConnectWithoutImagejoueurInput = {
    where: JoueurWhereUniqueInput
    create: XOR<JoueurCreateWithoutImagejoueurInput, JoueurUncheckedCreateWithoutImagejoueurInput>
  }

  export type JoueurUpsertWithoutImagejoueurInput = {
    update: XOR<JoueurUpdateWithoutImagejoueurInput, JoueurUncheckedUpdateWithoutImagejoueurInput>
    create: XOR<JoueurCreateWithoutImagejoueurInput, JoueurUncheckedCreateWithoutImagejoueurInput>
    where?: JoueurWhereInput
  }

  export type JoueurUpdateToOneWithWhereWithoutImagejoueurInput = {
    where?: JoueurWhereInput
    data: XOR<JoueurUpdateWithoutImagejoueurInput, JoueurUncheckedUpdateWithoutImagejoueurInput>
  }

  export type JoueurUpdateWithoutImagejoueurInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    equipe?: EquipeUpdateOneRequiredWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateWithoutImagejoueurInput = {
    id_joueur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    id_equipe?: IntFieldUpdateOperationsInput | number
  }

  export type JoueurCreateManyEquipeInput = {
    id_joueur?: number
    nom: string
    prenom: string
  }

  export type JoueurUpdateWithoutEquipeInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    imagejoueur?: ImageJoueurUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateWithoutEquipeInput = {
    id_joueur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    imagejoueur?: ImageJoueurUncheckedUpdateManyWithoutJoueurNestedInput
  }

  export type JoueurUncheckedUpdateManyWithoutEquipeInput = {
    id_joueur?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
  }

  export type ImageJoueurCreateManyJoueurInput = {
    id_photo?: number
    nom: string
  }

  export type ImageJoueurUpdateWithoutJoueurInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ImageJoueurUncheckedUpdateWithoutJoueurInput = {
    id_photo?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ImageJoueurUncheckedUpdateManyWithoutJoueurInput = {
    id_photo?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EquipeCountOutputTypeDefaultArgs instead
     */
    export type EquipeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EquipeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JoueurCountOutputTypeDefaultArgs instead
     */
    export type JoueurCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JoueurCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EquipeDefaultArgs instead
     */
    export type EquipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EquipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JoueurDefaultArgs instead
     */
    export type JoueurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JoueurDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImageJoueurDefaultArgs instead
     */
    export type ImageJoueurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImageJoueurDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}